def get_key(i,j):
    keys = [[1,2,3],[4,5,6],[7,8,9]]
    return keys[i][j]
    
def get_key_complex(i,j):
    keys = ['..1..','.234.','56789','.ABC.','..D..']
    return keys[i][j]

def make_move(pos,move):
    if move == 'U':
        pos[0] = 0 if pos[0] == 0 else pos[0] - 1
    elif move == 'D':
        pos[0] = 2 if pos[0] == 2 else pos[0] + 1
    elif move == 'L':
        pos[1] = 0 if pos[1] == 0 else pos[1] - 1
    elif move == 'R':
        pos[1] = 2 if pos[1] == 2 else pos[1] + 1
        
    return pos
    
def make_move_complex(pos,move):
    not_allowed = {
        'U': ['2,0','1,1','0,2','1,3','2,4'],
        'D': ['2,0','3,1','4,2','3,3','2,4'],
        'L': ['0,2','1,1','2,0','3,1','4,2'],
        'R': ['0,2','1,3','2,4','3,3','4,2']
    }
    
    t = '{},{}'.format(pos[0],pos[1])
    if t in not_allowed[move]:
        return pos
    else:
        if move == 'U':
            pos[0] -= 1
        elif move == 'D':
            pos[0] += 1
        elif move == 'L':
            pos[1] -=1
        elif move == 'R':
            pos[1] += 1
        
    return pos
    
def day2_part1(moves):
    # start in the center at 5
    pos = [1,1]
    numbers = []

    lines = moves.split(',')
    for line in lines:
        for move in line:
            pos = make_move(pos,move)
        numbers.append(get_key(pos[0],pos[1]))
    return ''.join(map(str,numbers))

def day2_part2(moves):
    # start at the left-center at 5
    pos = [2,0]
    numbers = []

    lines = moves.split(',')
    for line in lines:
        for move in line:
            pos = make_move_complex(pos,move)
        numbers.append(get_key_complex(pos[0],pos[1]))
    return ''.join(map(str,numbers))

    
if __name__ == '__main__':
    input = 'LDUDDRUDRRURRRRDRUUDULDLULRRLLLUDDULRDLDDLRULLDDLRUURRLDUDDDDLUULUUDDDDLLLLLULLRURDRLRLRLLURDLLDDUULUUUUDLULLRLUUDDLRDRRURRLURRLLLRRDLRUDURRLRRRLULRDLUDRDRLUDDUUULDDDDDURLDULLRDDRRUDDDDRRURRULUDDLLRRDRURDLLLLLUUUDLULURLULLDRLRRDDLUDURUDRLRURURLRRDDLDUULURULRRLLLDRURDULRDUURRRLDLDUDDRLURRDRDRRLDLRRRLRURDRLDRUDLURRUURDLDRULULURRLDLLLUURRULUDDDRLDDUDDDRRLRDUDRUUDDULRDDULDDURULUDLUDRUDDDLRRRRRDLULDRLRRRRUULDUUDRRLURDLLUUDUDDDLUUURDRUULRURULRLLDDLLUDLURRLDRLDDDLULULLURLULRDLDRDDDLRDUDUURUUULDLLRDRUDRDURUUDDLRRRRLLLUULURRURLLDDLDDD,DRURURLLUURRRULURRLRULLLURDULRLRRRLRUURRLRRURRRRUURRRLUDRDUDLUUDULURRLDLULURRLDURLUUDLDUDRUURDDRDLLLDDRDDLUUDRDUDDRRDLDUDRLDDDRLLDDLUDRULRLLURLDLURRDRUDUDLDLULLLRDLLRRDULLDRURRDLDRURDURDULUUURURDLUDRRURLRRLDULRRDURRDRDDULLDRRRLDRRURRRRUURDRLLLRRULLUDUDRRDDRURLULLUUDDRLDRRDUDLULUUDRDDDDLRLRULRLRLLDLLRRDDLDRDURRULLRLRRLULRULDDDRDRULDRUUDURDLLRDRURDRLRDDUDLLRUDLURURRULLUDRDRDURLLLDDDRDRURRDDRLRRRDLLDDLDURUULURULRLULRLLURLUDULDRRDDLRDLRRLRLLULLDDDRDRU,URUUDUDRDDRDRRRDLLUDRUDRUUUURDRRDUDUULDUDLLUDRRUDLLRDLLULULDRRDDULDRLDLDDULLDDRDDDLRLLDLLRDUUDUURLUDURDRRRRLRRLDRRUULLDLDLRDURULRURULRRDRRDDUUURDURLLDDUUDLRLDURULURRRDRRUUUDRDDLRLRRLLULUDDRRLRRRRLRDRUDDUULULRRURUURURRLRUDLRRUUURUULLULULRRDDULDRRLLLDLUDRRRLLRDLLRLDUDDRRULULUDLURLDRDRRLULLRRDRDLUURLDDURRLDRLURULDLDRDLURRDRLUUDRUULLDRDURLLDLRUDDULLLLDLDDDLURDDUDUDDRLRDDUDDURURLULLRLUDRDDUDDLDRUURLDLUUURDUULRULLDDDURULDDLLD,LRRLLRURUURRDLURRULDDDLURDUURLLDLRRRRULUUDDLULLDLLRDLUDUULLUDRLLDRULDDURURDUUULRUDRLLRDDDURLRDRRURDDRUDDRRULULLLDLRLULLDLLDRLLLUDLRURLDULRDDRDLDRRDLUUDDLURDLURLUDLRDLDUURLRRUULDLURULUURULLURLDDURRURDRLUULLRRLLLDDDURLURUURLLLLDLLLUDLDLRDULUULRRLUUUUDLURRURRULULULRURDDRRRRDRUDRURDUDDDDUDLURURRDRRDRUDRLDLDDDLURRRURRUDLDURDRLDLDLDDUDURLUDUUDRULLRLLUUDDUURRRUDURDRRUURLUDRRUDLUDDRUUDLULDLLDLRUUDUULLDULRRLDRUDRRDRLUUDDRUDDLLULRLULLDLDUULLDRUUDDUDLLLLDLDDLDLURLDLRUUDDUULLUDUUDRUDLRDDRDLDRUUDUDLLDUURRRLLLLRLLRLLRLUUDULLRLURDLLRUUDRULLULRDRDRRULRDLUDDURRRRURLLRDRLLDRUUULDUDDLRDRD,DDLRRULRDURDURULLLLRLDDRDDRLLURLRDLULUDURRLUDLDUDRDULDDULURDRURLLDRRLDURRLUULLRUUDUUDLDDLRUUDRRDDRLURDRUDRRRDRUUDDRLLUURLURUDLLRRDRDLUUDLUDURUUDDUULUURLUDLLDDULLUURDDRDLLDRLLDDDRRDLDULLURRLDLRRRLRRURUUDRLURURUULDURUDRRLUDUDLRUDDUDDRLLLULUDULRURDRLUURRRRDLLRDRURRRUURULRUDULDULULUULULLURDUDUDRLDULDRDDULRULDLURLRLDDDDDDULDRURRRRDLLRUDDRDDLUUDUDDRLLRLDLUDRUDULDDDRLLLLURURLDLUUULRRRUDLLULUUULLDLRLDLLRLRDLDULLRLUDDDRDRDDLULUUR'

    print day2_part1('ULL,RRDDD,LURDL,UUUUD')
    print day2_part1(input)
    print day2_part2('ULL,RRDDD,LURDL,UUUUD')
    print day2_part2(input)
